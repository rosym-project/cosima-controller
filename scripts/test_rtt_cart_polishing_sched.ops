# ============================================================
#
# This file is a part of CoSiMA (CogIMon) project
#
# Copyright (C) 2020 by Dennis Leroy Wigand <dwigand@techfak.uni-bielefeld.de>
#
# This file may be licensed under the terms of the
# GNU Lesser General Public License Version 3 (the ``LGPL''),
# or (at your option) any later version.
#
# Software distributed under the License is distributed
# on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the LGPL for the specific language
# governing rights and limitations.
#
# You should have received a copy of the LGPL along with this
# program. If not, go to http://www.gnu.org/licenses/lgpl.html
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The development of this software was supported by:
#   CoR-Lab, Research Institute for Cognition and Robotics
#     Bielefeld University
#
# ============================================================

# Load the rtt ros service lib.
import("rtt_ros")
# Load the lib.
ros.import("cosima-robot-sim")

ros.import("rtt_roscomm")
ros.import("rtt_trajectory_msgs")
ros.import("eigen_typekit")
ros.import("rtt_sensor_msgs")
ros.import("rtt_geometry_msgs")
ros.import("rtt_cosima_msgs")

ros.import("cosima-controller")

# Load the service to coanfigure the CSs.
loadService("this","CoreSchedulerService");

# Load the robot interface.
loadComponent("robot","cosima::RTTRobotManipulatorSim")
# We need to have the period at 0 to prevent the instantiation of a PeriodicActivity
setActivityOnCPU("robot",0.001,90,ORO_SCHED_OTHER,0)
robot.connectBullet()
# Connect to the already spawned robot in bullet
robot.connectToRobotByName("iiwa14_0", "bullet")

robot.defineKinematicChain("iiwa14_0", "/home/flex/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14-wischer/iiwa14.urdf", "world", "iiwa_link_wischer")
robot.configure()

# Make it closer to the real robot! Might decrease the overall accuracy...
robot.addArtificialGravity("iiwa14_0", true)

var geometry_msgs.Pose cf = geometry_msgs.Pose()
cf.position.x = 0
cf.position.y = 0
cf.position.z = 0.7
cf.orientation.w = 1
cf.orientation.x = 0
cf.orientation.y = 0
cf.orientation.z = 0

loadComponent("KinDyn", "cosima::RTTKinDynMultiArm")
# setActivityOnCPU("KinDyn",0.001,10,ORO_SCHED_RT,1)
# KinDyn.addChain("KDL","/home/flex/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14-wischer/iiwa14.urdf","world","iiwa_link_wischer")
KinDyn.addChainWithWorldOffset("KDL","/home/flex/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14-wischer/iiwa14.urdf","world","iiwa_link_wischer", cf)
KinDyn.configure()

KinDyn.ext_override = 0


loadComponent("jspdctrl", "cosima::controller::RTTJointPDCtrl")
setActivityOnCPU("jspdctrl",0.001,10,ORO_SCHED_RT,3)
jspdctrl.addRobot(7)
jspdctrl.configure()
jspdctrl.setGains(200,80)
jspdctrl.include_gravity=true

# KinDyn.ext_override=0

var eigen_vector jconfig = eigen_vector(7)
# jconfig[0]=0.0
# jconfig[1]=1.2
# jconfig[2]=0.0
# # jconfig[3]=-1.0
# jconfig[3]=0.0
# jconfig[4]=0.0
# # jconfig[5]=0.3
# jconfig[5]=0.0
# jconfig[6]=0.0
# jspdctrl.setPositionCmd(jconfig)

jconfig[0]=0.00649109
jconfig[1]=0.0769402
jconfig[2]=-0.0153035
jconfig[3]=-0.668369
jconfig[4]=0.0119298
jconfig[5]=0.825524
jconfig[6]=-0.0069144
jspdctrl.setPositionCmd(jconfig)

# jconfig[0]=0.0
# jconfig[1]=0.0
# jconfig[2]=0.0
# jconfig[3]=0.0
# jconfig[4]=0.0
# jconfig[5]=0.0
# jconfig[6]=0.0
# jspdctrl.setPositionCmd(jconfig)


# jconfig[0]=0.08907255532131235
# jconfig[1]=0.9515201307910602
# jconfig[2]=-0.019023026844190688
# jconfig[3]=-0.1348580560029059
# jconfig[4]=-0.03500313841145328
# jconfig[5]=-1.0436718907833102
# jconfig[6]=-0.01568671894346847

# jconfig[0]=0.08959701657561887
# jconfig[1]=0.9746779703089351
# jconfig[2]=-0.022143888149590597
# jconfig[3]=-0.09495262319819009
# jconfig[4]=-0.032369775316610575
# jconfig[5]=-1.0280273135423905
# jconfig[6]=-0.030310267110530087


# CART CONTROLLER
loadComponent("cartctrl", "cosima::controller::RTTCartPIDController")
# setActivityOnCPU("cartctrl",0.001,11,ORO_SCHED_RT,3)
cartctrl.addRobot(6, 7);
cartctrl.preparePorts();
cartctrl.configure();
cartctrl.setGains(400,150)
cartctrl.setGainsOrientation(500,200)
# cartctrl.setGains(400,100)
# cartctrl.setGainsOrientation(30,2)


cartctrl.addJSgravitycompensation(false)
cartctrl.useTSgravitycompensation(true)
cartctrl.impedanceCTRL = false # Check this!



# FORCE CONTROLLER
loadComponent("fctrl", "cosima::controller::ConstantForceController")
# setActivityOnCPU("fctrl",0.001,10,ORO_SCHED_OTHER, 3)
fctrl.setDOFsize(7);
fctrl.setTaskSpaceDimension(6);
fctrl.preparePorts();
var eigen_vector forcedir = eigen_vector(6);
forcedir[0] = 1;
forcedir[1] = 0;
forcedir[2] = 0;
forcedir[3] = 0;
forcedir[4] = 0;
forcedir[5] = 0;
fctrl.setConstantForceVector(forcedir);
# fctrl.setConstantForce(-30); # TODO DLW check this!
fctrl.setConstantForce(20); # TODO

# In this case it means that we need to compensate for the EEF which are 0.5 Kg so -4~-5N In case of 0 we 
fctrl.configure()

# Ok this works for the single compensation. However, how do we handle the case of VMs? Needs to be checked!
fctrl.include_gravity=false
fctrl.include_compensation=true




###################################################
########                Prio               ########
###################################################
loadComponent("prio", "cosima::prioritization::DynamicTaskPrioritization")
# setActivityOnCPU("prio", 0.001, 90, ORO_SCHED_OTHER, 5)
prio.loadYAMLConfig("/home/flex/system/flexassembly_dev_ws/src/cosima-controller/scripts/test_constraint_x.yaml")
prio.configure()
prio.setStartCS("Folding_SR_0")
prio.setNewTargetCS("Folding_SR_0");
prio.debug_pointintime=1;

prio.substract_gravity=true

###################################################
########                Task               ########
###################################################
loadComponent("task","cosima::task::TaskDescriberSynthesis")
# setActivityOnCPU("task",0.001,90,ORO_SCHED_OTHER, 4)
task.loadYAMLConfig("/home/flex/system/flexassembly_dev_ws/src/cosima-controller/scripts/test_constraint_x.yaml")
task.configure()
task.activateContactSituation("Folding_SR_0");
task.debug_pointintime=1;
addPeer("task","prio")

var ConnPolicy cp;

# # # Use direct robot interface connection
# connect("robot.out_iiwa14_0_jointstate_fdb","jspdctrl.in_robotstatus_port",cp)
# connect("robot.out_iiwa14_0_gc_fdb","jspdctrl.in_coriolisAndGravity_port",cp)
# connect("robot.out_iiwa14_0_inertia_fdb","jspdctrl.in_inertia_port",cp)

# # # Use a proxy connection via the KinDyn component
connect("robot.out_iiwa14_0_jointstate_fdb","KinDyn.in_robotstatus_0_port",cp)
# connect("robot.out_iiwa14_0_gc_fdb","KinDyn.in_external_gravity_0_port",cp)
connect("robot.out_iiwa14_0_inertia_fdb","KinDyn.in_inertia_0_port",cp)

# TASK
connect("KinDyn.out_robotstatus_port", "task.in_robotstatus_port", cp)
connect("KinDyn.out_coriolisAndGravity_port","task.in_gc_port", cp)
connect("KinDyn.out_inertia_port","task.in_inertia_port", cp)
connect("KinDyn.out_jacobianDot_port","task.in_jacobian_dot_port", cp)
connect("KinDyn.out_jacobian_port","task.in_jacobian_port", cp)
connect("KinDyn.out_cartPos_port","task.in_CartPos_port", cp)
connect("KinDyn.out_cartVel_port", "task.in_CartVel_port", cp)

# JOINT CONTROLLER
# connect("KinDyn.out_robotstatus_port","jspdctrl.in_robotstatus_port",cp)
# connect("KinDyn.out_coriolisAndGravity_port","jspdctrl.in_coriolisAndGravity_port",cp)
# connect("KinDyn.out_inertia_port","jspdctrl.in_inertia_port",cp)
connect("task.out_nullspace_tracking_1_robotstatus_port","jspdctrl.in_robotstatus_port", cp)
connect("task.out_nullspace_tracking_1_GC_port","jspdctrl.in_coriolisAndGravity_port", cp)
connect("task.out_nullspace_tracking_1_Inertia_c_port","jspdctrl.in_inertia_port",cp)

# CART CONTROLLER
connect("KinDyn.out_cartPos_port", "cartctrl.in_currentTaskSpacePosition_port", cp)
# connect("task.out_motion_tracking_1_vm_fdb_cart_pos_port", "cartctrl.in_currentTaskSpacePosition_port", cp)
connect("KinDyn.out_cartVel_port", "cartctrl.in_currentTaskSpaceVelocity_port", cp)
# connect("task.out_motion_tracking_1_vm_fdb_cart_vel_port", "cartctrl.in_currentTaskSpaceVelocity_port", cp)
# connect("KinDyn.out_coriolisAndGravity_port", "cartctrl.in_coriolisAndGravity_port", cp)
connect("task.out_motion_tracking_1_GC_port", "cartctrl.in_coriolisAndGravity_port", cp)
# connect("KinDyn.out_inertia_port","cartctrl.in_inertia_port", cp)
connect("task.out_motion_tracking_1_Inertia_c_port","cartctrl.in_inertia_port", cp)
# connect("KinDyn.out_robotstatus_port", "cartctrl.in_robotstatus_port", cp)
connect("task.out_motion_tracking_1_robotstatus_port", "cartctrl.in_robotstatus_port", cp)
# connect("KinDyn.out_jacobian_port","cartctrl.in_jacobian_port", cp)
connect("task.out_motion_tracking_1_Jacobian_port","cartctrl.in_jacobian_port", cp)
# connect("KinDyn.out_jacobianDot_port","cartctrl.in_jacobianDot_port", cp)
connect("task.out_motion_tracking_1_Jacobian_dot_port","cartctrl.in_jacobianDot_port", cp)
#######
connect("task.out_motion_tracking_1_P_port","cartctrl.in_projection_port", cp)
connect("task.out_motion_tracking_1_P_dot_port","cartctrl.in_projectionDot_port", cp)


# # # Command connection always stays the same
###################################################
########              Prio CONN            ########
###################################################
connect("task.out_nullspace_tracking_1_Jacobian_port", "prio.in_nullspace_tracking_1_J", cp)
connect("task.out_nullspace_tracking_1_Inertia_port", "prio.in_nullspace_tracking_1_inertia", cp)
connect("task.out_motion_tracking_1_Jacobian_port", "prio.in_motion_tracking_1_J", cp)
connect("task.out_motion_tracking_1_Inertia_port", "prio.in_motion_tracking_1_inertia", cp)

####### force
connect("task.out_force_constraint_1_Jacobian_port", "fctrl.in_jacobian_port", cp)
connect("task.out_force_constraint_1_Jacobian_port", "prio.in_force_constraint_1_J", cp)
connect("task.out_force_constraint_1_Inertia_port", "prio.in_force_constraint_1_inertia", cp)
connect("fctrl.out_torques_port","prio.in_force_constraint_1_torques", cp)
connect("task.out_force_constraint_1_P_port", "fctrl.in_P_port", cp)
connect("task.out_force_constraint_1_GC_port", "fctrl.in_h_port", cp)
connect("task.out_force_constraint_1_Inertia_port", "fctrl.in_M_port", cp)
connect("task.out_force_constraint_1_Inertia_c_port", "fctrl.in_Mc_port", cp)
connect("task.out_force_constraint_1_P_dot_port", "fctrl.in_Pdot_port", cp)
connect("task.out_force_constraint_1_robotstatus_port", "fctrl.in_robotstatus_port", cp)
connect("cartctrl.out_torques_port", "fctrl.in_tauM_port", cp)
#######
connect("KinDyn.out_robotstatus_port", "prio.in_robotstatus_port", cp)
connect("KinDyn.out_coriolisAndGravity_port", "prio.in_coriolisAndGravity_port", cp)
connect("jspdctrl.out_torques_port", "prio.in_nullspace_tracking_1_torques", cp)
connect("cartctrl.out_torques_port","prio.in_motion_tracking_1_torques", cp)

connect("prio.out_torques_port", "robot.in_iiwa14_0_JointTorqueCtrl_cmd", cp)
# connect("jspdctrl.out_torques_port","robot.in_iiwa14_0_JointTorqueCtrl_cmd",cp)
# connect("cartctrl.out_torques_port","robot.in_iiwa14_0_JointTorqueCtrl_cmd", cp)


# ################################
# ros.import("iHQP_SoT_package")
# loadComponent("sot", "QPSoT_Component")
# setActivityOnCPU("sot",0.001,90,ORO_SCHED_OTHER, 4)
# #
# var string config_path = "/home/flex/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14/configs/iiwa14-camera-tmp.yaml"
# sot.loadConfig(config_path)

# connect("KinDyn.out_coriolisAndGravity_port", "sot.in_coriolisAndGravity_port", cp)
# # in_desiredTaskSpace_port
# connect("KinDyn.out_robotstatus_port", "sot.in_robotstatus_port", cp)
# ### We would need a switch here!
# connect("sot.out_torques_port","robot.in_iiwa14_0_JointTorqueCtrl_cmd", cp)
# sot.configure()
# sot.gravCompDamp = 1
# sot.setJntPosture(0,0.0)
# sot.setJntPosture(1,0.126)
# sot.setJntPosture(2,0.0)
# sot.setJntPosture(3,-0.884)
# sot.setJntPosture(4,0.0)
# sot.setJntPosture(5,0.632)
# sot.setJntPosture(6,0.0)
# stream("sot.in_desiredTaskSpace_port", ros.topic("/cart/traj_setpoint"))
# ################################

# STREAMS
stream("jspdctrl.in_joint_cmd_port", ros.topic("flex_planning_ros/traj_setpoints"))

stream("robot.out_iiwa14_0_jointstate_fdb", ros.topic("/joint_state_publisher/joint_states"))

stream("cartctrl.in_desiredTaskSpace_port", ros.topic("/cart/traj_setpoint"))

stream("KinDyn.out_cartPos_0_port", ros.topic("/robot/fdb/cart_pose_0"))
# geometry_msgs.Pose out_cartPos_0_port => (/geometry_msgs/Pose)

# stream("traj.in_pose_port", ros.topic("/traj"))

#########################################################################
# Instantiate the amount of CSs you need.
loadComponent("CS1", "cosima::CoreScheduler");
setActivityOnCPU("CS1", 0, 5, ORO_SCHED_OTHER, 0); # In this case, the CSs are triggered by their internal activation criterion instead of OROCOS.

loadComponent("CS2", "cosima::CoreScheduler");
setActivityOnCPU("CS2", 0, 5, ORO_SCHED_OTHER, 1);

loadComponent("CS3", "cosima::CoreScheduler");
setActivityOnCPU("CS3", 0, 5, ORO_SCHED_OTHER, 3);

# # Configure the CSs with the service API.
# CoreSchedulerService.setInvolvedCoreScheduler(strings("CS1", "CS2", "CS3"))
# CoreSchedulerService.setExecutionOrder("CS1", strings("KinDyn", "task", "prio"))
# CoreSchedulerService.setExecutionOrder("CS2", strings("robot", "cartctrl"))
# CoreSchedulerService.setExecutionOrder("CS3", strings("jspdctrl", "fctrl"))
# CoreSchedulerService.setLastComponentInPTG("prio")

# # Define precedence constraints.
# CoreSchedulerService.addPTGFormula("robot", "KinDyn")
# CoreSchedulerService.addPTGFormula("KinDyn", "task")
# CoreSchedulerService.addPTGFormula("task", "jspdctrl")
# CoreSchedulerService.addPTGFormula("task", "cartctrl")
# CoreSchedulerService.addPTGFormula("task", "fctrl")
# CoreSchedulerService.addPTGFormula("jspdctrl", "prio")
# CoreSchedulerService.addPTGFormula("cartctrl", "prio")
# CoreSchedulerService.addPTGFormula("fctrl", "prio")

# Configure the CSs with the service API.
CoreSchedulerService.setInvolvedCoreScheduler(strings("CS1", "CS2", "CS3"))
# CoreSchedulerService.setExecutionOrder("CS1", strings("robot"))
CoreSchedulerService.setExecutionOrder("CS1", strings("KinDyn", "task", "prio"))
CoreSchedulerService.setExecutionOrder("CS2", strings("cartctrl"))
CoreSchedulerService.setExecutionOrder("CS3", strings("fctrl"))
CoreSchedulerService.setLastComponentInPTG("prio")

# Define precedence constraints.
# CoreSchedulerService.addPTGFormula("robot", "KinDyn")
# CoreSchedulerService.addPTGFormula("KinDyn", "task")
CoreSchedulerService.addPTGFormula("task", "cartctrl")
CoreSchedulerService.addPTGFormula("task", "fctrl")
CoreSchedulerService.addPTGFormula("cartctrl", "prio")
CoreSchedulerService.addPTGFormula("fctrl", "prio")

# CoreSchedulerService.addPTGFormula("task", "cartctrl")

# Finalize the configurations.
CoreSchedulerService.configure()


#############
loadComponent("collector", "cosima::RTTCallSampleCollector");
setActivityOnCPU("collector", 0.1, 5, ORO_SCHED_OTHER, 2);



robot.setControlMode("iiwa14_0", "JointTorqueCtrl")

CoreSchedulerService.start()

# Start the CSs.
# CS1.start()
# CS2.start()
# CS3.start()


#########################################################################





robot.start()

# KinDyn.start()
jspdctrl.start()
# # traj.start()

# cartctrl.start()
# fctrl.start()
# task.start()
# prio.start()

# prio.stop();
# sot.start();


# jconfig[0]=1.57
# jconfig[1]=0.4
# jconfig[2]=0.0
# jconfig[3]=-1.5
# jconfig[4]=0.0
# jconfig[5]=0.5
# jconfig[6]=0.0
# jspdctrl.setPositionCmd(jconfig)

# jconfig[0]=0.0
# jconfig[1]=0.0
# jconfig[2]=0.0
# jconfig[3]=0.0
# jconfig[4]=0.0
# jconfig[5]=0.0
# jconfig[6]=0.0
# jspdctrl.setPositionCmd(jconfig)

# task.activateContactSituation("Folding_SR_0");
# prio.setNewTargetCS("Folding_SR_0");

# task.activateContactSituation("Folding_SR_1");
# prio.setNewTargetCS("Folding_SR_1");

# task.activateContactSituation("Folding_SR_2");
# prio.setNewTargetCS("Folding_SR_2");

# task.switchCSinSecs("Folding_SR_1", 0);