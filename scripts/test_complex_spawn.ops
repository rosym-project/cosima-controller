# ============================================================
#
# This file is a part of CoSiMA (CogIMon) project
#
# Copyright (C) 2020 by Dennis Leroy Wigand <dwigand@techfak.uni-bielefeld.de>
#
# This file may be licensed under the terms of the
# GNU Lesser General Public License Version 3 (the ``LGPL''),
# or (at your option) any later version.
#
# Software distributed under the License is distributed
# on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the LGPL for the specific language
# governing rights and limitations.
#
# You should have received a copy of the LGPL along with this
# program. If not, go to http://www.gnu.org/licenses/lgpl.html
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The development of this software was supported by:
#   CoR-Lab, Research Institute for Cognition and Robotics
#     Bielefeld University
#
# ============================================================

# Load the rtt ros service lib.
import("rtt_ros")
# Load the lib.
ros.import("cosima-robot-sim")

ros.import("rtt_roscomm")
ros.import("rtt_trajectory_msgs")
ros.import("eigen_typekit")
ros.import("rtt_sensor_msgs")

import("cosima-controller")

# Load the robot interface.
loadComponent("robot","cosima::RTTRobotManipulatorSim")
# We need to have the period at 0 to prevent the instantiation of a PeriodicActivity
setActivityOnCPU("robot",0.001,90,ORO_SCHED_OTHER,0)
robot.connectBullet()
# Connect to the already spawned robot in bullet
robot.connectToRobotByName("iiwa14_0", "bullet")

robot.setBasePosition("iiwa14_0",-0.3,-1.0,0.0)

robot.defineKinematicChain("iiwa14_0", "/home/flex/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14/iiwa14.urdf", "world", "iiwa7_link_ee")

# robot.defineKinematicChain("iiwa14_0", "/home/flex/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/kuka-iiwa-7-egp-40/model.urdf", "world", "iiwa7_link_ee")
robot.configure()

loadComponent("KinDyn", "cosima::RTTKinDynMultiArm")
setActivityOnCPU("KinDyn",0.001,10,ORO_SCHED_RT,1)
# KinDyn.addChain("KDL","/home/flex/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/kuka-iiwa-7-egp-40/model.urdf","world","iiwa7_link_ee")
KinDyn.addChain("KDL","/home/flex/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14/iiwa14.urdf","world","iiwa7_link_ee")
KinDyn.configure()


loadComponent("jspdctrl", "cosima::controller::RTTJointPDCtrl")
setActivityOnCPU("jspdctrl",0.001,10,ORO_SCHED_RT,2)
jspdctrl.addRobot(7)
jspdctrl.configure()
jspdctrl.setGains(200,80)


var ConnPolicy cp;

# # # Use direct robot interface connection
# connect("robot.out_kuka-iiwa-7-egp-40_0_jointstate_fdb","jspdctrl.in_robotstatus_port",cp)
# connect("robot.out_kuka-iiwa-7-egp-40_0_gc_fdb","jspdctrl.in_coriolisAndGravity_port",cp)
# connect("robot.out_kuka-iiwa-7-egp-40_0_inertia_fdb","jspdctrl.in_inertia_port",cp)

# # # Use a proxy connection via the KinDyn component
connect("robot.out_iiwa14_0_jointstate_fdb","KinDyn.in_robotstatus_0_port",cp)
connect("robot.out_iiwa14_0_gc_fdb","KinDyn.in_external_gravity_0_port",cp)
connect("robot.out_iiwa14_0_inertia_fdb","KinDyn.in_inertia_0_port",cp)

connect("KinDyn.out_robotstatus_port","jspdctrl.in_robotstatus_port",cp)
connect("KinDyn.out_coriolisAndGravity_port","jspdctrl.in_coriolisAndGravity_port",cp)
connect("KinDyn.out_inertia_port","jspdctrl.in_inertia_port",cp)

# # # Command connection always stays the same
connect("jspdctrl.out_torques_port","robot.in_iiwa14_0_JointTorqueCtrl_cmd",cp)


# stream("jspdctrl.in_joint_cmd_port", ros.topic("flex_planning_ros/traj_setpoints"))

# stream("robot.out_iiwa14_0_jointstate_fdb", ros.topic("/joint_state_publisher/joint_states"))

robot.setControlMode("iiwa14_0", "JointTorqueCtrl")
robot.start()

KinDyn.start()
# jspdctrl.start()
