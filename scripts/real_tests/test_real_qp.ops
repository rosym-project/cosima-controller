# ============================================================
#
# This file is a part of CoSiMA (CogIMon) project
#
# Copyright (C) 2020 by Dennis Leroy Wigand <dwigand@techfak.uni-bielefeld.de>
#
# This file may be licensed under the terms of the
# GNU Lesser General Public License Version 3 (the ``LGPL''),
# or (at your option) any later version.
#
# Software distributed under the License is distributed
# on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
# express or implied. See the LGPL for the specific language
# governing rights and limitations.
#
# You should have received a copy of the LGPL along with this
# program. If not, go to http://www.gnu.org/licenses/lgpl.html
# or write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# The development of this software was supported by:
#   CoR-Lab, Research Institute for Cognition and Robotics
#     Bielefeld University
#
# ============================================================

#devel
#xbot

# Load the rtt ros service lib.
import("rtt_ros")
ros.import("cosima-fri-iiwa-hw")

ros.import("rtt_roscomm")
ros.import("rtt_trajectory_msgs")
ros.import("eigen_typekit")
ros.import("rtt_sensor_msgs")
ros.import("rtt_geometry_msgs")
ros.import("rtt_cosima_msgs")

ros.import("cosima-controller")

loadComponent("robot","cosima::RTTFRIiiwaHW")
setActivityOnCPU("robot",0,90,ORO_SCHED_RT,0)
robot.fri_ip = "192.170.10.2"

robot.defineKinematicChain("kuka1", "/home/kogrob/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14/iiwa14.urdf", "world", "iiwa_link_ee")

robot.configure()

stream("robot.out_kuka1_jointstate_fdb", ros.topic("robot/state"))


var geometry_msgs.Pose cf = geometry_msgs.Pose()
cf.position.x = 0
cf.position.y = 0.0
cf.position.z = 0.0
cf.orientation.w = 1
cf.orientation.x = 0
cf.orientation.y = 0
cf.orientation.z = 0

loadComponent("KinDyn", "cosima::RTTKinDynMultiArm")
setActivityOnCPU("KinDyn",0.001,10,ORO_SCHED_RT,1)
KinDyn.addChainWithWorldOffset("KDL","/home/kogrob/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14/iiwa14.urdf","world","iiwa_link_ee", cf)
KinDyn.configure()
KinDyn.ext_override = 0

var ConnPolicy cp;

connect("robot.out_kuka1_jointstate_fdb","KinDyn.in_robotstatus_0_port",cp)

connect("robot.out_kuka1_ext_torque_fdb","KinDyn.in_external_torque_0_port",cp)

stream("KinDyn.out_external_wrench_0_port", ros.topic("robot/wrench"))

################################
loadComponent("sot", "cosima::controller::RTTControlStack")
setActivityOnCPU("sot",0.001,90,ORO_SCHED_RT, 4)
#
var string config_path = "/home/kogrob/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14/configs/iiwa14-camera-real.yaml"
sot.loadConfig(config_path)

connect("KinDyn.out_coriolisAndGravity_port", "sot.in_coriolisAndGravity_port", cp)
# in_desiredTaskSpace_port
connect("KinDyn.out_robotstatus_port", "sot.in_robotstatus_port", cp)
### We would need a switch here!

connect("sot.out_torques_port","robot.in_kuka1_JointTorqueCtrl_cmd", cp)

sot.configure()
sot.gravCompDamp = 1


sot.setJntPosture(0,1.56845)
sot.setJntPosture(1,-0.448372)
sot.setJntPosture(2,-0.070882)
sot.setJntPosture(3,1.36423)
sot.setJntPosture(4,-0.0121202)
sot.setJntPosture(5,-1.25336)
sot.setJntPosture(6,0.785342)


stream("sot.in_desiredTaskSpace_port", ros.topic("/cart/traj_setpoint"))

stream("KinDyn.out_cartPos_0_port", ros.topic("/robot/fdb/cart_pose_0"))
sot.setCartDamping(9)
sot.setCartStiffness(300)

# Cart Stiffness
# var eigen_vector css = eigen_vector(6)
# css[0]=10.0
# css[1]=10.0
# css[2]=10.0
# css[3]=3.0
# css[4]=3.0
# css[5]=1.0
# # sot.setCartStiffnessE(css)
# # Cart Damping
# var eigen_vector csd = eigen_vector(6)
# csd[0]=3.0
# csd[1]=3.0
# csd[2]=3.0
# csd[3]=0.2
# csd[4]=0.2
# csd[5]=0.2
# # sot.setCartDampingE(csd)

# sot.setMassSpringDamper(css, csd, 0.0, false)

var eigen_vector css = eigen_vector(6)
css[0]=3.0
css[1]=3.0
css[2]=3.0
css[3]=1.0
css[4]=1.0
css[5]=1.0
# sot.setCartStiffnessE(css)
# Cart Damping
var eigen_vector csd = eigen_vector(6)
csd[0]=0.1
csd[1]=0.1
csd[2]=0.1
csd[3]=0.1
csd[4]=0.1
csd[5]=0.1
# sot.setCartDampingE(csd)

sot.setMassSpringDamper(css, csd, 0.0, false)

# 0.440385 SOT vs 0.43861 KUKA

# var eigen_vector css = eigen_vector(6)
# css[0]=1600.0
# css[1]=1600.0
# css[2]=1600.0
# css[3]=200.0
# css[4]=200.0
# css[5]=10.0
# sot.setCartStiffnessE(css)
# # Cart Damping
# var eigen_vector csd = eigen_vector(6)
# csd[0]=60.0
# csd[1]=60.0
# csd[2]=60.0
# csd[3]=1.5
# csd[4]=1.5
# csd[5]=1.0
# sot.setCartDampingE(csd)

# Joint Stiffness
var eigen_vector jss = eigen_vector(7)
jss[0]=0.0
jss[1]=0.0
jss[2]=0.0
jss[3]=0.0
jss[4]=0.0
jss[5]=0.0
jss[6]=0.0

sot.setJointStiffnessE(jss)
# Joint Damping
var eigen_vector jsd = eigen_vector(7)
jsd[0]=0.0
jsd[1]=0.0
jsd[2]=0.0
jsd[3]=0.0
jsd[4]=0.0
jsd[5]=0.0
jsd[6]=0.0

sot.setJointDampingE(jsd)


loadComponent("css", "cosima::coordination::ContactSituationSwitcher")
setActivityOnCPU("css",0.001,10,ORO_SCHED_RT,3)
css.configure()

connect("KinDyn.out_cartPos_0_port","css.in_pose_port", cp)
connect("css.out_desiredTaskSpace_port","sot.in_desiredTaskSpace_port", cp)


robot.start()
robot.waitForReady()

KinDyn.start()





sot.start()


# var eigen_vector css = eigen_vector(6)
css[0]=1600.0
css[1]=1600.0
css[2]=1600.0
css[3]=300.0
css[4]=300.0
css[5]=100.0
# 
# var eigen_vector csd = eigen_vector(6)
csd[0]=80.0
csd[1]=80.0
csd[2]=80.0
# csd[3]=1.5
# csd[4]=1.5
# csd[5]=1.0
csd[3]=1.2
csd[4]=1.2
csd[5]=1.0
# 
sot.setMassSpringDamper(css, csd, 5.0, true)

css.start()



# var eigen_vector css = eigen_vector(6)
# css[0]=1600.0
# css[1]=1600.0
# css[2]=0.0
# css[3]=300.0
# css[4]=300.0
# css[5]=100.0
# # 
# var eigen_vector csd = eigen_vector(6)
# csd[0]=60.0
# csd[1]=60.0
# csd[2]=0.0
# csd[3]=1.2
# csd[4]=1.2
# csd[5]=1.0
# # 
# sot.setMassSpringDamper(css, csd, 5.0, false)




########################


# var eigen_vector css = eigen_vector(6)
# css[0]=1600.0
# css[1]=1600.0
# css[2]=0.0
# css[3]=0.0
# css[4]=300.0
# css[5]=100.0
# # 
# var eigen_vector csd = eigen_vector(6)
# csd[0]=80.0
# csd[1]=80.0
# csd[2]=0.0
# csd[3]=0.0
# csd[4]=1.2
# csd[5]=1.0
# # 
# sot.setMassSpringDamper(css, csd, 5.0, true)