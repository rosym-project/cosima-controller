import("rtt_ros")
ros.import("cosima-fri-iiwa-hw")

ros.import("rtt_roscomm")
ros.import("rtt_trajectory_msgs")
ros.import("eigen_typekit")
ros.import("rtt_sensor_msgs")
ros.import("rtt_geometry_msgs")

ros.import("cosima-controller")

loadComponent("robot","cosima::RTTFRIiiwaHW")
setActivityOnCPU("robot",0.001,90,ORO_SCHED_OTHER,0)
robot.fri_ip = "192.170.10.2"

robot.defineKinematicChain("kuka1", "/home/kogrob/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14/iiwa14.urdf", "world", "iiwa_link_ee")

robot.configure()

stream("robot.out_kuka1_jointstate_fdb", ros.topic("robot/state"))


var geometry_msgs.Pose cf = geometry_msgs.Pose()
cf.position.x = 0
cf.position.y = 0.0
cf.position.z = 0.0
cf.orientation.w = 1
cf.orientation.x = 0
cf.orientation.y = 0
cf.orientation.z = 0


loadComponent("KinDyn", "cosima::RTTKinDynMultiArm")
setActivityOnCPU("KinDyn",0.001,10,ORO_SCHED_RT,1)
KinDyn.addChainWithWorldOffset("KDL","/home/kogrob/system/flexassembly_dev_ws/src/py-flex-assembly/gym_flexassembly/data/robots/epfl-iiwa14/iiwa14.urdf","world","iiwa_link_ee", cf)
KinDyn.configure()
KinDyn.ext_override = 0

# stream("KinDyn.out_robotstatus_port", ros.topic("kin/dyn/robot/state"))

var ConnPolicy cp;

# # # Use a proxy connection via the KinDyn component
connect("robot.out_kuka1_jointstate_fdb","KinDyn.in_robotstatus_0_port",cp)

connect("robot.out_kuka1_ext_torque_fdb","KinDyn.in_external_torque_0_port",cp)

stream("KinDyn.out_external_wrench_0_port", ros.topic("robot/wrench"))



robot.start()

KinDyn.start()
